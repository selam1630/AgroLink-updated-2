// File: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  phone                   String    @unique
  name                    String?
  accountNumber           String?
  role                    String
  email                   String?
  password                String?
  otp                     String?
  otpExpiresAt            DateTime?
  status                  String    @default("unregistered")
  lastRegistrationAttempt DateTime?

  products         Product[]
  cartItems        CartItem[]
  orders           Order[]
  transactions     Transaction[]
  advices          Advice[]
  farmerRegistries FarmerRegistry[]

  createdAt DateTime? @default(now()) @map("createdAt")
  updatedAt DateTime? @updatedAt @map("updatedAt")
  fertilizerAdvices FertilizerAdvice[] @relation("UserFertilizerAdvices") 
  soilData          SoilData[]          @relation("UserSoilData")
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  quantity    Int
  price       Float?
  description String?
  imageUrl    String?
  status      String      @default("available")
  isSold      Boolean     @default(false)
  userId      String?     @db.ObjectId // Make this field optional
  user        User?       @relation(fields: [userId], references: [id], onDelete: SetNull) // Make the relation optional
  cartItems   CartItem[]
  orderItems  OrderItem[]

  createdAt DateTime? @default(now()) @map("createdAt")
  updatedAt DateTime? @updatedAt @map("updatedAt")
}

model CartItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  productId String @db.ObjectId
  quantity  Int

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Order {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  userId      String       @db.ObjectId
  user        User         @relation(fields: [userId], references: [id])
  status      String       @default("pending")
  orderItems  OrderItem[]
  transaction Transaction?
  txRef       String?

  createdAt DateTime @default(now())
}

model OrderItem {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String @db.ObjectId
  productId   String @db.ObjectId
  quantity    Int
  priceAtTime Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Transaction {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  txRef   String @unique
  amount  Float
  status  String @default("pending")
  orderId String @unique @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [id])

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime? @default(now()) @map("createdAt")
  updatedAt DateTime? @updatedAt @map("updatedAt")
}

model Advice {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  advice  String
  crop    String
  region  String
  problem String
  userId  String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
}

model DiseaseAdvice {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  image       String
  diseaseName String
  causes      String
  treatment   String

  createdAt DateTime @default(now())
}

model DisasterAlert {
  id          String   @id @default(cuid()) @map("_id")
  type        String
  severity    String
  description String
  date        DateTime
  createdAt   DateTime @default(now())
}

model FarmerRegistry {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  phone     String  @unique
  region    String?
  addedById String  @db.ObjectId
  addedBy   User    @relation(fields: [addedById], references: [id])

  isRegistered Boolean @default(false)

  createdAt DateTime @default(now())
}
model News {
  id          String   @id @map("_id") @default(auto()) @db.ObjectId
  category    String
  title       String
  description String
  prices      Json?     
  createdAt   DateTime @default(now())
}
model FertilizerAdvice {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  advice     String
  crop       String?
  region     String?
  problem    String?
  sent       Boolean  @default(false)
  sentAt     DateTime?
  farmerId   String   @db.ObjectId
  farmer     User     @relation(fields: [farmerId], references: [id], name: "UserFertilizerAdvices")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SoilData {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  farmerId String  @db.ObjectId
  farmer   User    @relation(fields: [farmerId], references: [id], name: "UserSoilData")
  ph       Float
  nitrogen Float
  phosphorus Float
  potassium Float
  region   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
